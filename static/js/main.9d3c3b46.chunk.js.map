{"version":3,"sources":["App.js","index.js"],"names":["Train","ref","useRef","scroll","useScroll","useGLTF","cabin","seat","meshes","useMemo","Cabin","nodes","cabin_1","Seat","useFrame","current","position","z","offset","castShadow","receiveShadow","models","color","seatColor","name","Quarter","props","rotation","Math","PI","Row","Text","fontSize","App","dpr","shadows","camera","fov","gl","alpha","attach","args","intensity","left","right","top","bottom","fallback","ScrollControls","pages","MeshReflectorMaterial","blur","resolution","mixBlur","mixStrength","depthScale","minDepthThreshold","metalness","roughness","Environment","preset","ReactDOM","createRoot","document","getElementById","render"],"mappings":"qWAIA,SAASA,IACP,IAAMC,EAAMC,mBACNC,EAASC,cACf,EAAsBC,YAAQ,CAAC,yBAA0B,0BAAzD,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAASC,mBAAQ,iBAAO,CAAEC,MAAOJ,EAAMK,MAAMC,QAASC,KAAMN,EAAKI,MAAMJ,QAAS,CAACD,EAAOC,IAI9F,OAHAO,aAAS,kBAAOb,EAAIc,QAAQC,SAASC,EAAoB,IAAhBd,EAAOe,UAI9C,cAAC,IAAD,CAAQC,YAAU,EAACC,eAAa,EAACZ,OAAQA,EAAzC,SACG,SAACa,GAAD,OACC,wBAAOpB,IAAKA,EAAZ,UACE,cAAC,EAAD,CAAOoB,OAAQA,EAAQC,MAAM,UAAUC,UAAU,aAAaC,KAAK,KAAKR,SAAU,CAAC,EAAG,GAAI,KAC1F,cAAC,EAAD,CAAOK,OAAQA,EAAQC,MAAM,UAAUC,UAAU,OAAOC,KAAK,KAAKR,SAAU,CAAC,EAAG,GAAI,MACpF,cAAC,EAAD,CAAOK,OAAQA,EAAQC,MAAM,UAAUC,UAAU,eAAeC,KAAK,KAAKR,SAAU,CAAC,EAAG,GAAI,MAC5F,cAAC,EAAD,CAAOK,OAAQA,EAAQC,MAAM,UAAUC,UAAU,OAAOC,KAAK,KAAKR,SAAU,CAAC,EAAG,GAAI,MACpF,cAAC,EAAD,CAAOK,OAAQA,EAAQC,MAAM,UAAUC,UAAU,aAAaC,KAAK,KAAKR,SAAU,CAAC,EAAG,GAAI,aAOpG,IAAMS,EAAU,SAAC,GAAD,IAAGJ,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAUI,EAArB,wBACd,kDAAWA,GAAX,cACE,cAACL,EAAOR,KAAR,CAAaS,MAAOA,EAAON,SAAU,EAAE,IAAM,EAAG,MAChD,cAACK,EAAOR,KAAR,CAAaS,MAAOA,EAAON,SAAU,CAAC,IAAM,EAAG,MAC/C,cAACK,EAAOR,KAAR,CAAaS,MAAOA,EAAON,SAAU,EAAE,IAAM,GAAI,IAAMW,SAAU,CAAC,EAAGC,KAAKC,GAAI,KAC9E,cAACR,EAAOR,KAAR,CAAaS,MAAOA,EAAON,SAAU,CAAC,IAAM,GAAI,IAAMW,SAAU,CAAC,EAAGC,KAAKC,GAAI,UAI3EC,EAAM,SAAC,GAAD,IAAGT,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAUI,EAArB,wBACV,kDAAWA,GAAX,cACE,cAAC,EAAD,CAASL,OAAQA,EAAQC,MAAOA,EAAON,SAAU,EAAE,KAAM,IAAM,QAC/D,cAAC,EAAD,CAASK,OAAQA,EAAQC,MAAOA,EAAON,SAAU,CAAC,KAAM,IAAM,aAI5DN,EAAQ,SAAC,GAAD,IAAGW,EAAH,EAAGA,OAAH,IAAWC,aAAX,MAAmB,QAAnB,MAA4BC,iBAA5B,MAAwC,QAAxC,EAAiDC,EAAjD,EAAiDA,KAASE,EAA1D,wBACZ,kDAAWA,GAAX,cACE,cAACK,EAAA,EAAD,CAAMC,SAAU,EAAGV,MAAM,UAAUN,SAAU,CAAC,EAAG,EAAG,GAAIW,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAApF,SACGL,IAEH,cAACH,EAAOX,MAAR,CAAcY,MAAOA,IACrB,cAAC,EAAD,CAAKD,OAAQA,EAAQC,MAAOC,IAC5B,cAAC,EAAD,CAAKF,OAAQA,EAAQC,MAAOC,EAAWP,SAAU,CAAC,EAAG,GAAI,OACzD,cAAC,EAAD,CAAKK,OAAQA,EAAQC,MAAOC,EAAWP,SAAU,CAAC,EAAG,GAAI,OACzD,cAAC,EAAD,CAAKK,OAAQA,EAAQC,MAAOC,EAAWP,SAAU,CAAC,EAAG,GAAI,OACzD,cAAC,EAAD,CAAKK,OAAQA,EAAQC,MAAOC,EAAWP,SAAU,CAAC,EAAG,GAAI,MACzD,cAAC,EAAD,CAAKK,OAAQA,EAAQC,MAAOC,EAAWP,SAAU,CAAC,EAAG,GAAI,QACzD,cAAC,EAAD,CAAKK,OAAQA,EAAQC,MAAOC,EAAWP,SAAU,CAAC,EAAG,GAAI,QACzD,cAAC,EAAD,CAAKK,OAAQA,EAAQC,MAAOC,EAAWP,SAAU,CAAC,EAAG,GAAI,aAI9C,SAASiB,IACtB,OACE,eAAC,IAAD,CAAQC,IAAK,CAAC,EAAG,KAAMC,SAAO,EAACC,OAAQ,CAAEpB,SAAU,EAAE,GAAI,GAAI,IAAKqB,IAAK,IAAMC,GAAI,CAAEC,OAAO,GAA1F,UACE,qBAAKC,OAAO,MAAMC,KAAM,CAAC,UAAW,GAAI,MACxC,uBAAOD,OAAO,aAAaC,KAAM,CAAC,aAClC,8BAAcC,UAAW,MACzB,kCAAkBvB,YAAU,EAACuB,UAAW,EAAG1B,SAAU,CAAC,GAAI,EAAG,GAAI,iBAAgB,CAAC,KAAM,MAAxF,SACE,oCAAoBwB,OAAO,gBAAgBG,MAAO,GAAIC,MAAO,GAAIC,IAAK,GAAIC,QAAS,OAErF,eAAC,WAAD,CAAUC,SAAU,KAApB,UACE,cAACC,EAAA,EAAD,CAAgBC,MAAO,EAAvB,SACE,cAACjD,EAAD,MAEF,uBAAMgB,SAAU,CAAC,GAAI,IAAK,GAAIW,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAA1D,UACE,+BAAeY,KAAM,CAAC,GAAI,MAC1B,cAACS,EAAA,EAAD,CACEC,KAAM,CAAC,IAAK,KACZC,WAAY,KACZC,QAAS,EACTC,YAAa,IACbC,WAAY,EACZC,kBAAmB,IACnBlC,MAAM,UACNmC,UAAW,GACXC,UAAW,OAGf,cAACC,EAAA,EAAD,CAAaC,OAAO,eCnF5BC,IAASC,WAAWC,SAASC,eAAe,SAASC,OAAO,cAAChC,EAAD,O","file":"static/js/main.9d3c3b46.chunk.js","sourcesContent":["import { Suspense, useMemo, useRef } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { useGLTF, useScroll, ScrollControls, Environment, Merged, Text, MeshReflectorMaterial } from '@react-three/drei'\n\nfunction Train() {\n  const ref = useRef()\n  const scroll = useScroll()\n  const [cabin, seat] = useGLTF(['/cabin-transformed.glb', '/seat-transformed.glb'])\n  const meshes = useMemo(() => ({ Cabin: cabin.nodes.cabin_1, Seat: seat.nodes.seat }), [cabin, seat])\n  useFrame(() => (ref.current.position.z = scroll.offset * 120))\n  // Merged creates THREE.InstancedMeshes out of the meshes you feed it\n  // All in all we end up with just 5 draw-calls for the entire scene\n  return (\n    <Merged castShadow receiveShadow meshes={meshes}>\n      {(models) => (\n        <group ref={ref}>\n          <Cabin models={models} color=\"#252525\" seatColor=\"sandybrown\" name=\"1A\" position={[0, 0, -6]} />\n          <Cabin models={models} color=\"#454545\" seatColor=\"gray\" name=\"2B\" position={[0, 0, -32]} />\n          <Cabin models={models} color=\"#252525\" seatColor=\"lightskyblue\" name=\"3A\" position={[0, 0, -58]} />\n          <Cabin models={models} color=\"#454545\" seatColor=\"gray\" name=\"4B\" position={[0, 0, -84]} />\n          <Cabin models={models} color=\"#252525\" seatColor=\"sandybrown\" name=\"5B\" position={[0, 0, -110]} />\n        </group>\n      )}\n    </Merged>\n  )\n}\n\nconst Quarter = ({ models, color, ...props }) => (\n  <group {...props}>\n    <models.Seat color={color} position={[-0.35, 0, 0.7]} />\n    <models.Seat color={color} position={[0.35, 0, 0.7]} />\n    <models.Seat color={color} position={[-0.35, 0, -0.7]} rotation={[0, Math.PI, 0]} />\n    <models.Seat color={color} position={[0.35, 0, -0.7]} rotation={[0, Math.PI, 0]} />\n  </group>\n)\n\nconst Row = ({ models, color, ...props }) => (\n  <group {...props}>\n    <Quarter models={models} color={color} position={[-1.2, -0.45, 9.75]} />\n    <Quarter models={models} color={color} position={[1.2, -0.45, 9.75]} />\n  </group>\n)\n\nconst Cabin = ({ models, color = 'white', seatColor = 'white', name, ...props }) => (\n  <group {...props}>\n    <Text fontSize={4} color=\"#101020\" position={[0, 6, 4]} rotation={[-Math.PI / 2, 0, 0]}>\n      {name}\n    </Text>\n    <models.Cabin color={color} />\n    <Row models={models} color={seatColor} />\n    <Row models={models} color={seatColor} position={[0, 0, -1.9]} />\n    <Row models={models} color={seatColor} position={[0, 0, -6.6]} />\n    <Row models={models} color={seatColor} position={[0, 0, -8.5]} />\n    <Row models={models} color={seatColor} position={[0, 0, -11]} />\n    <Row models={models} color={seatColor} position={[0, 0, -12.9]} />\n    <Row models={models} color={seatColor} position={[0, 0, -17.6]} />\n    <Row models={models} color={seatColor} position={[0, 0, -19.5]} />\n  </group>\n)\n\nexport default function App() {\n  return (\n    <Canvas dpr={[1, 1.5]} shadows camera={{ position: [-15, 15, 18], fov: 35 }} gl={{ alpha: false }}>\n      <fog attach=\"fog\" args={['#17171b', 30, 40]} />\n      <color attach=\"background\" args={['#17171b']} />\n      <ambientLight intensity={0.25} />\n      <directionalLight castShadow intensity={2} position={[10, 6, 6]} shadow-mapSize={[1024, 1024]}>\n        <orthographicCamera attach=\"shadow-camera\" left={-20} right={20} top={20} bottom={-20} />\n      </directionalLight>\n      <Suspense fallback={null}>\n        <ScrollControls pages={3}>\n          <Train />\n        </ScrollControls>\n        <mesh position={[0, -1.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\n          <planeGeometry args={[50, 50]} />\n          <MeshReflectorMaterial\n            blur={[400, 100]}\n            resolution={1024}\n            mixBlur={1}\n            mixStrength={3.5}\n            depthScale={1}\n            minDepthThreshold={0.85}\n            color=\"#505050\"\n            metalness={0.6}\n            roughness={1}\n          />\n        </mesh>\n        <Environment preset=\"dawn\" />\n      </Suspense>\n    </Canvas>\n  )\n}\n","import ReactDOM from 'react-dom'\nimport './styles.css'\nimport App from './App'\n\nReactDOM.createRoot(document.getElementById('root')).render(<App />)\n"],"sourceRoot":""}